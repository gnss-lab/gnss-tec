#!/usr/bin/env python
# coding=utf8
"""
File: 
Description: 
"""
from collections import defaultdict
from datetime import datetime
from io import StringIO

import pytest

from gnss_tec import rnx
from gnss_tec.glo import collect_freq_nums
from gnss_tec.tec import Tec
from gnss_tec.tec import TecError

TEST_RINEX = '''\
     2.11           OBSERVATION DATA    M (MIXED)           RINEX VERSION / TYPE
    11    L1    L2    L5    C1    C2    C5    P1    P2    S1# / TYPES OF OBSERV
          S2    S5                                          # / TYPES OF OBSERV
  2016    01    01    00    00   00.000                     TIME OF FIRST OBS
                                                            END OF HEADER
 16 01 01 00 00  0.0000000  0 22E12R11G14G15R01G20E19G10E11R02G21R24
                                G18G22G24G29G12G13R13R12R18R03
 138986960.04817          .00010 103788980.88707  26448329.92400          .00000
  26448333.64900          .00000          .00000        43.00000          .00000
        45.50000
 114692496.00407  89205279.56706          .00000  21463126.87000  21463134.18900
          .00000  21463126.33800  21463134.21800        47.75000        36.50000
          .00000
 123721705.61006  96406529.09344          .00000  23543447.75400          .00000
          .00000  23543447.26100  23543447.96600        40.25000        24.25040
          .00000
 118205971.00008  92108587.77507          .00000  22493821.61300  22493820.79300
          .00000  22493821.26400  22493820.16200        49.25000        45.75000
          .00000
 116710533.53608  90774882.40506          .00000  21833088.50000  21833092.70200
          .00000  21833088.66500  21833097.46200        48.00000        37.00000
          .00000
 114412979.65908  89153010.96546          .00000  21772026.80600          .00000
          .00000  21772025.97400  21772024.68300        51.00000        41.00040
          .00000
 144455453.95916          .00010 107872624.84506  27488931.41800          .00000
  27488935.71600          .00000          .00000        39.25000          .00000
        40.50000
 125322249.73707  97653707.51606  93584804.43808  23848027.66000  23848029.56100
  23848030.75300  23848027.81400  23848029.21300        43.75000        40.50000
        48.25000
 131029516.97518          .00010  97846733.66208  24934081.62000          .00000
  24934083.95800          .00000          .00000        48.25000          .00000
        50.50000
 115648664.25308  89948984.95306          .00000  21672491.76900  21672499.73300
          .00000  21672491.77600  21672498.65500        50.50000        40.75000
          .00000
 107974944.34908  84136320.58847          .00000  20546941.23900          .00000
          .00000  20546940.62400  20546939.08700        52.25000        43.75040
          .00000
 116074786.70507  90280386.57506          .00000  21706567.77800  21706575.27200
          .00000  21706568.99000  21706575.09600        43.50000        36.50000
          .00000
 111077565.78308  86553963.86346          .00000  21137343.54800          .00000
          .00000  21137342.42700  21137341.57700        52.75000        39.25040
          .00000
 133074488.01606 103694409.79442          .00000  25323232.34800          .00000
          .00000  25323230.55600  25323231.83100        36.25000        12.25040
          .00000
 109541156.67009  85356781.57309  81800252.50600  20844970.86400  20844972.16400
  20844974.74800  20844970.86200  20844972.03700        54.50000        55.50000
          .00000
 128050950.46406  99779971.63206          .00000  24367283.45900  24367286.58700
          .00000  24367284.58200  24367285.90600        41.00000        39.25000
          .00000
 131010890.91706 102086400.47606          .00000  24930539.90500  24930541.63300
          .00000  24930539.33400  24930540.12000        38.00000        38.25000
          .00000
 134912987.58405 105127036.03541          .00000  25673056.27400          .00000
          .00000  25673059.64200  25673054.56500        34.50000         9.00040
          .00000
 126210923.40705  98164049.35905          .00000  23635255.95000  23635267.23400
          .00000  23635254.60800  23635265.49800        35.75000        35.25000
          .00000
 109879139.28807  85461560.97107          .00000  20569596.52500  20569603.76500
          .00000  20569596.07500  20569604.70900        47.50000        44.25000
          .00000
 129219982.33706 100504422.48904          .00000  24207256.49100  24207265.83100
          .00000  24207256.43200  24207264.18700        40.75000        29.25000
          .00000
 131411191.11306 102208711.25305          .00000  24548711.94700  24548718.63100
          .00000  24548713.93500  24548721.36500        38.25000        32.50000
          .00000
'''
TEST_NAV = '''\
     2.01           GLONASS NAV DATA                        RINEX VERSION / TYPE
CCRINEXG V1.4 UX    CDDIS               09-MAR-16 12:44     PGM / RUN BY / DATE 
IGS BROADCAST EPHEMERIS FILE                                COMMENT             
teqc  2013Mar15     GPS Operator        20160102  0:05:     COMMENT             
  2016     1     1    0.279396772385D-07                    CORR TO SYSTEM TIME 
    17                                                      LEAP SECONDS        
                                                            END OF HEADER       
 1 16  1  1  0 15  0.0-0.147201120853D-03 0.000000000000D+00 0.300000000000D+02
    0.634915380859D+04-0.254754066467D+00 0.000000000000D+00 0.000000000000D+00
    0.170520444336D+05 0.243410968780D+01 0.186264514923D-08 0.100000000000D+01
   -0.178746152344D+05 0.223380565643D+01 0.186264514923D-08 0.000000000000D+00
 2 16  1  1  0 15  0.0 0.169292092323D-03 0.909494701773D-12 0.000000000000D+00
    0.112042094727D+05-0.474354743957D+00-0.931322574616D-09 0.000000000000D+00
   -0.190359375000D+04 0.309479141235D+01 0.000000000000D+00-0.400000000000D+01
   -0.228054150391D+05-0.494022369385D+00 0.279396772385D-08 0.000000000000D+00
 3 16  1  1  0 15  0.0 0.588288530707D-04 0.000000000000D+00 0.000000000000D+00
    0.948807763672D+04-0.397904396057D+00-0.931322574616D-09 0.000000000000D+00
   -0.192305532227D+05 0.185273551941D+01-0.931322574616D-09 0.500000000000D+01
   -0.137629448242D+05-0.285944557190D+01 0.186264514923D-08 0.000000000000D+00
11 16  1  1  0 15  0.0 0.211074948311D-04 0.909494701773D-12 0.300000000000D+02
    0.709092041016D+04-0.188071441650D+01 0.000000000000D+00 0.000000000000D+00
    0.163343989258D+05-0.166045093536D+01 0.931322574616D-09 0.000000000000D+00
   -0.182993959961D+05-0.220252799988D+01 0.186264514923D-08 0.000000000000D+00
12 16  1  1  0 15  0.0 0.309832394123D-04 0.000000000000D+00 0.300000000000D+02
    0.189814648438D+05-0.170626640320D+00 0.000000000000D+00 0.000000000000D+00
    0.167160502930D+05-0.356877326965D+00 0.279396772385D-08-0.100000000000D+01
   -0.261047900391D+04-0.356942367554D+01 0.931322574616D-09 0.000000000000D+00
13 16  1  1  0 15  0.0 0.119423493743D-04 0.000000000000D+00 0.300000000000D+02
    0.196034287109D+05 0.169367027283D+01 0.931322574616D-09 0.000000000000D+00
    0.683185058594D+04 0.113419055939D+01 0.186264514923D-08-0.200000000000D+01
    0.148094580078D+05-0.276290798187D+01 0.000000000000D+00 0.000000000000D+00
18 16  1  1  0 15  0.0 0.827852636576D-04 0.909494701773D-12 0.000000000000D+00
    0.637317285156D+04 0.266341304779D+01-0.931322574616D-09 0.000000000000D+00
   -0.129299960938D+05-0.110974597931D+01-0.931322574616D-09-0.300000000000D+01
   -0.210128657227D+05 0.149519443512D+01 0.186264514923D-08 0.000000000000D+00
24 16  1  1  0 15  0.0-0.132388435304D-03 0.000000000000D+00 0.300000000000D+02
    0.232909306641D+05-0.127716922760D+01 0.000000000000D+00 0.000000000000D+00
   -0.429083447266D+04 0.296489715576D+00 0.000000000000D+00 0.200000000000D+01
    0.944887841797D+04 0.327562046051D+01 0.000000000000D+00 0.000000000000D+00
'''


def test_tec_get_freq():
    tec = Tec(datetime.today(), 'GLO', 'G15')

    obs_code = {
        1: 'L1',
        2: 'L5'
    }

    standard_f = {
        1: 1575.42e+06,
        2: 1176.45e+06
    }

    test_f = tec.get_freq(obs_code)
    for b in 1, 2:
        assert test_f[b] == standard_f[b]


def test_tec_get_freq_unknown():
    tec = Tec(datetime.today(), '   ', 'X15')
    obs_code = {
        1: 'X1',
        2: 'X2',
    }
    with pytest.raises(TecError):
        freq = tec.get_freq(obs_code)


def test_tec_get_freq_glo():
    tec = Tec(datetime(2016, 1, 1), 'GPS', 'R22', -3)

    obs_code = {
        1: 'L1',
        2: 'L2'
    }
    std_freq = {
        1: 1602e+06 + -3 * 562.5e+03,
        2: 1246e+06 + -3 * 437.5e+03
    }

    test_freq = tec.get_freq(obs_code)
    for b in 1, 2:
        assert test_freq[b] == std_freq[b]


def test_tec_phase_tec():
    tec = Tec(datetime(2016, 1, 1), 'GPS', 'G01')

    tec.phase = {
        1: 134680873.916,
        2: 104946140.779
    }

    tec.phase_code = {
        1: 'L1',
        2: 'L2'
    }

    res = tec.phase_tec
    assert pytest.approx(res, -12.226)


def test_tec_phase_tec_0():
    tec = Tec(datetime(2016, 1, 1), 'GPS', 'G01')

    tec.phase = {
        1: 0.,
        2: 104946140.779
    }

    tec.phase_code = {
        1: 'L1',
        2: 'L2'
    }

    assert tec.phase_tec is None


def test_tec_pr_tec():
    tec = Tec(datetime(2016, 1, 1), 'GPS', 'G01')

    # 25475915.229 25475919.584 41.450
    tec.p_range = {
        1: 25475915.229,
        2: 25475919.584
    }

    tec.p_range_code = {
        1: 'P1',
        2: 'P2'
    }

    res = tec.p_range_tec
    pytest.approx(res, 41.450)


def test_tec_pr_tec_0():
    tec = Tec(datetime(2016, 1, 1), 'GPS', 'G01')

    tec.p_range = {
        1: 25475915.229,
        2: 0.
    }

    tec.p_range_code = {
        1: 'P1',
        2: 'P2'
    }

    assert tec.p_range_tec is None


def test_tec_init():
    with pytest.raises(TecError):
        Tec(datetime(2016, 1, 1), 'GPS', 'R01')


def test_validity():
    tec = Tec(
        datetime(2016, 1, 1),
        'GPS',
        'G01',
    )

    tec.phase = {
        1: 134680873.916,
        2: 104946140.779
    }

    tec.p_range = {
        1: 25475915.229,
        2: 0
    }

    tec.lli = {
        1: 0,
        2: 1
    }

    validity = 2 ** 4 + 2 ** 2

    assert validity == tec.validity


def test_rnx():
    """"""
    std_tec = dict(
        E12=(datetime(2016, 1, 1, 0, 0), -34.0509, 28.9138, 8),
        R11=(datetime(2016, 1, 1, 0, 0), -11.4876, 76.8256, 0),
        G14=(datetime(2016, 1, 1, 0, 0), -12.1819, 6.71, 0),
        G15=(datetime(2016, 1, 1, 0, 0), -90.5184, -10.4885, 0),
        R01=(datetime(2016, 1, 1, 0, 0), -53.9433, 85.8261, 0),
        G20=(datetime(2016, 1, 1, 0, 0), -92.5134, -12.2874, 0),
        E19=(datetime(2016, 1, 1, 0, 0), -90.177, 33.3615, 8),
        G10=(datetime(2016, 1, 1, 0, 0), -14.9274, 13.3153, 0),
        E11=(datetime(2016, 1, 1, 0, 0), -32.5192, 18.1478, 8),
        R02=(datetime(2016, 1, 1, 0, 0), -55.9082, 66.8781, 0),
        G21=(datetime(2016, 1, 1, 0, 0), -0.7346, -14.6287, 0),
        R24=(datetime(2016, 1, 1, 0, 0), 7.2404, 59.6137, 0),
        G18=(datetime(2016, 1, 1, 0, 0), -38.3506, -8.09009, 0),
        G22=(datetime(2016, 1, 1, 0, 0), -8.2461, 12.1351, 0),
        G24=(datetime(2016, 1, 1, 0, 0), -83.9452, 11.1833, 0),
        G29=(datetime(2016, 1, 1, 0, 0), -23.7813, 12.6015, 0),
        G12=(datetime(2016, 1, 1, 0, 0), 18.6661, 7.4809, 0),
        G13=(datetime(2016, 1, 1, 0, 0), -76.0586, -48.3216, 0),
        R13=(datetime(2016, 1, 1, 0, 0), 5.1096, 106.0223, 0),
        R12=(datetime(2016, 1, 1, 0, 0), -19.2083, 84.1176, 0),
        R18=(datetime(2016, 1, 1, 0, 0), 19.25606, 75.4477, 0),
        R03=(datetime(2016, 1, 1, 0, 0), -16.576001, 72.6929, 0),
    )

    rinex_file = StringIO(TEST_RINEX)
    nav_file = StringIO(TEST_NAV)
    glo_freq_nums = collect_freq_nums(nav_file)

    tec = defaultdict()
    for tec_obj in rnx(rinex_file, glo_freq_nums=glo_freq_nums):
        tec[tec_obj.satellite] = (
            tec_obj.timestamp,
            tec_obj.phase_tec,
            tec_obj.p_range_tec,
            tec_obj.validity,
        )

    for sat in tec:
        std_ts, std_phase_tec, std_pr_tec, std_val = std_tec[sat]
        ts, phase_tec, pr_tec, val = tec[sat]

        pytest.approx(std_phase_tec, phase_tec)
        pytest.approx(std_pr_tec, pr_tec)
        assert std_val == val
